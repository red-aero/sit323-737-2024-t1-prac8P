apiVersion: v1
kind: ConfigMap
metadata:
  name: task-management-app-files
data:
  "server.js": |
    const express = require('express');
    // const mongoose = require('mongoose'); // MongoDB dependency commented out
    const cors = require('cors');
    const dotenv = require('dotenv');
    const path = require('path');
    const { v4: uuidv4 } = require('uuid'); // For generating unique IDs

    // Load environment variables
    dotenv.config();

    const app = express();
    const PORT = process.env.PORT || 3000;

    // Middleware
    app.use(cors());
    app.use(express.json());
    app.use(express.static(path.join(__dirname, 'public')));

    // In-memory storage for tasks
    const tasks = [
      {
        _id: uuidv4(),
        title: "Task 1: Kubernetes Cluster Setup",
        description: "Set up a Kubernetes cluster using minikube or Docker Desktop for local development.",
        completed: true,
        createdAt: new Date(new Date().setDate(new Date().getDate() - 5))
      },
      {
        _id: uuidv4(),
        title: "Task 2: MongoDB Integration",
        description: "Configure MongoDB deployment in Kubernetes with persistent storage and proper authentication.",
        completed: true,
        createdAt: new Date(new Date().setDate(new Date().getDate() - 3))
      },
      {
        _id: uuidv4(),
        title: "Task 3: Application Deployment",
        description: "Deploy the Node.js application to Kubernetes and ensure it connects to MongoDB properly.",
        completed: false,
        createdAt: new Date(new Date().setDate(new Date().getDate() - 1))
      },
      {
        _id: uuidv4(),
        title: "Task 4: Implement Backup Strategy",
        description: "Create a backup and recovery plan for the MongoDB database in Kubernetes.",
        completed: false,
        createdAt: new Date()
      }
    ];

    // Routes
    app.get('/', (req, res) => {
      res.sendFile(path.join(__dirname, 'public', 'index.html'));
    });

    // Task CRUD operations with in-memory storage
    app.get('/api/tasks', (req, res) => {
      try {
        // Sort tasks by createdAt in descending order (newest first)
        const sortedTasks = [...tasks].sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
        res.json(sortedTasks);
      } catch (error) {
        console.error('Error fetching tasks:', error);
        res.status(500).json({ message: 'Failed to fetch tasks. Please try again.' });
      }
    });

    app.post('/api/tasks', (req, res) => {
      try {
        if (!req.body.title) {
          return res.status(400).json({ message: 'Task title is required' });
        }

        const newTask = {
          _id: uuidv4(),
          title: req.body.title,
          description: req.body.description || '',
          completed: req.body.completed || false,
          createdAt: new Date()
        };

        tasks.push(newTask);
        res.status(201).json(newTask);
      } catch (error) {
        console.error('Error creating task:', error);
        res.status(400).json({ message: 'Failed to create task. Please try again.' });
      }
    });

    app.get('/api/tasks/:id', (req, res) => {
      try {
        const task = tasks.find(task => task._id === req.params.id);

        if (!task) {
          return res.status(404).json({ message: 'Task not found' });
        }

        res.json(task);
      } catch (error) {
        console.error('Error fetching task:', error);
        res.status(500).json({ message: 'Failed to fetch task. Please try again.' });
      }
    });

    app.put('/api/tasks/:id', (req, res) => {
      try {
        const taskIndex = tasks.findIndex(task => task._id === req.params.id);

        if (taskIndex === -1) {
          return res.status(404).json({ message: 'Task not found' });
        }

        // Update task properties
        tasks[taskIndex] = {
          ...tasks[taskIndex],
          title: req.body.title || tasks[taskIndex].title,
          description: req.body.description !== undefined ? req.body.description : tasks[taskIndex].description,
          completed: req.body.completed !== undefined ? req.body.completed : tasks[taskIndex].completed
        };

        res.json(tasks[taskIndex]);
      } catch (error) {
        console.error('Error updating task:', error);
        res.status(400).json({ message: 'Failed to update task. Please try again.' });
      }
    });

    app.delete('/api/tasks/:id', (req, res) => {
      try {
        const taskIndex = tasks.findIndex(task => task._id === req.params.id);

        if (taskIndex === -1) {
          return res.status(404).json({ message: 'Task not found' });
        }

        // Remove task from array
        const deletedTask = tasks.splice(taskIndex, 1)[0];

        res.json({ message: 'Task deleted successfully' });
      } catch (error) {
        console.error('Error deleting task:', error);
        res.status(500).json({ message: 'Failed to delete task. Please try again.' });
      }
    });

    // Health check endpoint
    app.get('/health', (req, res) => {
      // Always return Connected status since we're using in-memory storage
      res.status(200).json({
        status: 'UP',
        database: 'Connected',
        timestamp: new Date().toISOString()
      });
    });

    // Start server directly (no MongoDB connection needed)
    app.listen(PORT, '0.0.0.0', () => {
      console.log(`Server running on http://0.0.0.0:${PORT}`);
    });
  "package.json": |
    {
      "name": "sit323-task-management",
      "version": "1.0.0",
      "description": "SIT323 Task Management System",
      "main": "server.js",
      "scripts": {
        "start": "node server.js",
        "dev": "nodemon server.js"
      },
      "dependencies": {
        "cors": "^2.8.5",
        "dotenv": "^16.0.3",
        "express": "^4.18.2",
        "uuid": "^9.0.0"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    }
  "index.html": |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>SIT323 Task Management System</title>
        <link rel="stylesheet" href="styles.css">
        <!-- Bootstrap CSS -->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        <!-- Font Awesome -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    </head>
    <body>
        <div class="container my-4">
            <header class="mb-4 text-center">
                <h1>SIT323 Task Management System</h1>
                <p class="text-muted">Kubernetes and MongoDB Integration</p>
            </header>

            <div class="row">
                <div class="col-md-4 mb-4">
                    <div class="card shadow-sm">
                        <div class="card-header bg-primary text-white">
                            <h5 class="card-title mb-0">Add New Task</h5>
                        </div>
                        <div class="card-body">
                            <form id="task-form">
                                <div class="mb-3">
                                    <label for="title" class="form-label">Title</label>
                                    <input type="text" class="form-control" id="title" required>
                                </div>
                                <div class="mb-3">
                                    <label for="description" class="form-label">Description</label>
                                    <textarea class="form-control" id="description" rows="3"></textarea>
                                </div>
                                <button type="submit" class="btn btn-primary w-100">Save Task</button>
                            </form>
                        </div>
                    </div>
                </div>

                <div class="col-md-8">
                    <div class="card shadow-sm">
                        <div class="card-header bg-secondary text-white d-flex justify-content-between align-items-center">
                            <h5 class="card-title mb-0">My Tasks</h5>
                            <div>
                                <button id="refresh-btn" class="btn btn-sm btn-light">
                                    <i class="fas fa-sync"></i> Refresh
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            <div id="tasks-container" class="list-group">
                                <!-- Tasks will be loaded dynamically here -->
                                <div class="text-center py-5" id="loading">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    <p class="mt-2">Loading tasks...</p>
                                </div>
                                <div id="no-tasks" class="text-center py-5 d-none">
                                    <i class="fas fa-clipboard-list fa-3x text-muted mb-3"></i>
                                    <p>No tasks found. Create your first task!</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <footer class="mt-5 text-center text-muted">
                <p>SIT323 Task Management System</p>
                <p><small>Kubernetes and MongoDB Integration - Practical 7P</small></p>
            </footer>
        </div>

        <!-- Task Item Template -->
        <template id="task-template">
            <div class="list-group-item list-group-item-action task-item" data-id="">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h5 class="task-title mb-1"></h5>
                        <p class="task-description text-muted mb-1"></p>
                        <small class="task-date text-muted"></small>
                    </div>
                    <div class="task-actions">
                        <div class="form-check form-switch d-inline-block me-2">
                            <input class="form-check-input task-complete" type="checkbox">
                        </div>
                        <button class="btn btn-sm btn-danger task-delete">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            </div>
        </template>

        <!-- Task Edit Modal -->
        <div class="modal fade" id="edit-modal" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Task</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="edit-form">
                            <input type="hidden" id="edit-id">
                            <div class="mb-3">
                                <label for="edit-title" class="form-label">Title</label>
                                <input type="text" class="form-control" id="edit-title" required>
                            </div>
                            <div class="mb-3">
                                <label for="edit-description" class="form-label">Description</label>
                                <textarea class="form-control" id="edit-description" rows="3"></textarea>
                            </div>
                            <div class="mb-3 form-check">
                                <input type="checkbox" class="form-check-input" id="edit-completed">
                                <label class="form-check-label" for="edit-completed">Completed</label>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="save-edit">Save Changes</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Toast Notifications -->
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div id="toast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto" id="toast-title">Notification</strong>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body" id="toast-message">
                    Operation completed successfully.
                </div>
            </div>
        </div>

        <!-- Bootstrap JS Bundle with Popper -->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
        <!-- Application JS -->
        <script src="app.js"></script>
    </body>
    </html>
  "styles.css": |
    /* Custom Styles for SIT323 Task Management System */

    body {
        background-color: #f0f4f8;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .task-item {
        transition: all 0.3s ease-in-out;
        border-left: 5px solid #00857d; /* Teal accent */
        margin-bottom: 8px;
        border-radius: 4px;
    }

    .task-item:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 12px rgba(0, 86, 112, 0.15);
    }

    .task-item[data-completed="true"] {
        border-left-color: #62b531; /* Green */
        background-color: rgba(98, 181, 49, 0.05);
    }

    .task-item[data-completed="true"] .task-title {
        text-decoration: line-through;
        color: #6c757d;
    }

    .task-description {
        white-space: pre-line;
    }

    .card {
        border-radius: 0.5rem;
        overflow: hidden;
    }

    .card-header {
        border-bottom: none;
    }

    .btn {
        border-radius: 0.25rem;
    }

    .list-group-item:first-child {
        border-top-left-radius: 0;
        border-top-right-radius: 0;
    }

    /* Animation for refresh button */
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .fa-sync.rotating {
        animation: spin 1s linear infinite;
    }

    /* Override Bootstrap styles with SIT323 theme */
    .bg-primary {
        background-color: #005670 !important; /* Deakin blue */
    }

    .bg-secondary {
        background-color: #00857d !important; /* Teal accent */
    }

    .btn-primary {
        background-color: #005670;
        border-color: #005670;
    }

    .btn-primary:hover {
        background-color: #003d4f;
        border-color: #003d4f;
    }

    .card {
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

    .card:hover {
        box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
    }

    /* Status indicators for SIT737 Task Management System */
    .status-indicator {
        display: inline-block;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 8px;
        box-shadow: 0 0 4px rgba(0, 0, 0, 0.2);
    }

    .status-completed {
        background-color: #62b531; /* Green */
    }

    .status-pending {
        background-color: #e59400; /* Orange */
    }

    .status-in-progress {
        background-color: #005670; /* Deakin blue */
    }
  "app.js": |
    // Task Manager Application

    document.addEventListener('DOMContentLoaded', () => {
        // DOM Elements
        const taskForm = document.getElementById('task-form');
        const tasksContainer = document.getElementById('tasks-container');
        const titleInput = document.getElementById('title');
        const descriptionInput = document.getElementById('description');
        const loadingElement = document.getElementById('loading');
        const noTasksElement = document.getElementById('no-tasks');
        const refreshBtn = document.getElementById('refresh-btn');
        const taskTemplate = document.getElementById('task-template');
        const editModal = new bootstrap.Modal(document.getElementById('edit-modal'));
        const editForm = document.getElementById('edit-form');
        const editIdInput = document.getElementById('edit-id');
        const editTitleInput = document.getElementById('edit-title');
        const editDescriptionInput = document.getElementById('edit-description');
        const editCompletedInput = document.getElementById('edit-completed');
        const saveEditBtn = document.getElementById('save-edit');
        const toast = new bootstrap.Toast(document.getElementById('toast'));
        const toastTitle = document.getElementById('toast-title');
        const toastMessage = document.getElementById('toast-message');

        // API Endpoints
        const API_URL = '/api/tasks';

        // Check database connection
        checkDatabaseConnection();

        // Initial load
        loadTasks();

        // Event Listeners
        taskForm.addEventListener('submit', createTask);
        refreshBtn.addEventListener('click', loadTasks);
        saveEditBtn.addEventListener('click', updateTask);

        // Functions
        async function checkDatabaseConnection() {
            try {
                const response = await fetch('/health');
                const data = await response.json();

                if (data.database !== 'Connected') {
                    showNotification(
                        'Database Connection Issue',
                        'The application is not connected to the MongoDB database. Tasks cannot be saved or retrieved.',
                        'warning',
                        10000 // longer display time
                    );
                }
            } catch (error) {
                console.error('Error checking database connection:', error);
            }
        }

        async function loadTasks() {
            try {
                showLoading(true);
                toggleRefreshAnimation(true);

                const response = await fetch(API_URL);

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to load tasks');
                }

                const tasks = await response.json();
                renderTasks(tasks);
            } catch (error) {
                console.error('Error loading tasks:', error);
                showNotification('Error', error.message || 'Failed to load tasks. Please try again.', 'danger');
                noTasksElement.classList.remove('d-none');
            } finally {
                showLoading(false);
                toggleRefreshAnimation(false);
            }
        }

        function renderTasks(tasks) {
            // Clear existing tasks except loading and no-tasks elements
            const taskElements = document.querySelectorAll('.task-item');
            taskElements.forEach(el => el.remove());

            if (tasks.length === 0) {
                noTasksElement.classList.remove('d-none');
            } else {
                noTasksElement.classList.add('d-none');

                tasks.forEach(task => {
                    const taskElement = createTaskElement(task);
                    loadingElement.insertAdjacentElement('beforebegin', taskElement);
                });
            }
        }

        function createTaskElement(task) {
            const clone = document.importNode(taskTemplate.content, true);
            const taskElement = clone.querySelector('.task-item');

            taskElement.dataset.id = task._id;
            taskElement.dataset.completed = task.completed;

            taskElement.querySelector('.task-title').textContent = task.title;
            taskElement.querySelector('.task-description').textContent = task.description || 'No description';

            const date = new Date(task.createdAt);
            taskElement.querySelector('.task-date').textContent = `Created: ${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;

            const completeCheckbox = taskElement.querySelector('.task-complete');
            completeCheckbox.checked = task.completed;
            completeCheckbox.addEventListener('change', () => toggleTaskComplete(task._id, completeCheckbox.checked));

            taskElement.querySelector('.task-delete').addEventListener('click', () => deleteTask(task._id));

            // Add click handler to edit when clicking on the task (not on action buttons)
            taskElement.addEventListener('click', (e) => {
                if (!e.target.closest('.task-actions')) {
                    openEditModal(task);
                }
            });

            return taskElement;
        }

        async function createTask(e) {
            e.preventDefault();

            const title = titleInput.value.trim();
            const description = descriptionInput.value.trim();

            if (!title) {
                showNotification('Error', 'Task title is required', 'danger');
                return;
            }

            try {
                const response = await fetch(API_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ title, description })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to create task');
                }

                // Reset form
                taskForm.reset();

                // Reload tasks
                loadTasks();

                showNotification('Success', 'Task created successfully!', 'success');
            } catch (error) {
                console.error('Error creating task:', error);
                showNotification('Error', error.message || 'Failed to create task. Please try again.', 'danger');
            }
        }

        async function toggleTaskComplete(id, completed) {
            try {
                const response = await fetch(`${API_URL}/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ completed })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to update task');
                }

                const task = await response.json();

                // Update UI
                const taskElement = document.querySelector(`.task-item[data-id="${id}"]`);
                taskElement.dataset.completed = task.completed;

                showNotification('Success', `Task marked as ${completed ? 'completed' : 'incomplete'}`, 'success');
            } catch (error) {
                console.error('Error updating task:', error);
                showNotification('Error', error.message || 'Failed to update task. Please try again.', 'danger');

                // Reset checkbox to previous state
                const taskElement = document.querySelector(`.task-item[data-id="${id}"]`);
                const checkbox = taskElement.querySelector('.task-complete');
                checkbox.checked = !completed;
            }
        }

        async function deleteTask(id) {
            if (!confirm('Are you sure you want to delete this task?')) {
                return;
            }

            try {
                const response = await fetch(`${API_URL}/${id}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to delete task');
                }

                // Remove task from UI
                const taskElement = document.querySelector(`.task-item[data-id="${id}"]`);
                taskElement.remove();

                // Check if there are any tasks left
                if (document.querySelectorAll('.task-item').length === 0) {
                    noTasksElement.classList.remove('d-none');
                }

                showNotification('Success', 'Task deleted successfully!', 'success');
            } catch (error) {
                console.error('Error deleting task:', error);
                showNotification('Error', error.message || 'Failed to delete task. Please try again.', 'danger');
            }
        }

        function openEditModal(task) {
            editIdInput.value = task._id;
            editTitleInput.value = task.title;
            editDescriptionInput.value = task.description || '';
            editCompletedInput.checked = task.completed;

            editModal.show();
        }

        async function updateTask() {
            const id = editIdInput.value;
            const title = editTitleInput.value.trim();
            const description = editDescriptionInput.value.trim();
            const completed = editCompletedInput.checked;

            if (!title) {
                showNotification('Error', 'Task title is required', 'danger');
                return;
            }

            try {
                const response = await fetch(`${API_URL}/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ title, description, completed })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to update task');
                }

                // Close modal
                editModal.hide();

                // Reload tasks to reflect changes
                loadTasks();

                showNotification('Success', 'Task updated successfully!', 'success');
            } catch (error) {
                console.error('Error updating task:', error);
                showNotification('Error', error.message || 'Failed to update task. Please try again.', 'danger');
            }
        }

        function showLoading(show) {
            loadingElement.style.display = show ? 'block' : 'none';
        }

        function toggleRefreshAnimation(animate) {
            const icon = refreshBtn.querySelector('.fa-sync');
            if (animate) {
                icon.classList.add('rotating');
            } else {
                icon.classList.remove('rotating');
            }
        }

        function showNotification(title, message, type = 'primary', duration = 5000) {
            // Set title and message
            toastTitle.textContent = title;
            toastMessage.textContent = message;

            // Set toast color based on type
            const toastElement = document.getElementById('toast');
            toastElement.className = 'toast';
            toastElement.classList.add(`text-bg-${type}`);

            // Create new toast instance with custom duration
            const toastInstance = new bootstrap.Toast(toastElement, {
                delay: duration
            });

            // Show toast
            toastInstance.show();
        }
    });
