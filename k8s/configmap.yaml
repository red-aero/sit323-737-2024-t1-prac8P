apiVersion: v1
kind: ConfigMap
metadata:
  name: task-management-app-files
data:
  "server.js": |
    const express = require('express');
    const { v4: uuidv4 } = require('uuid');
    const path = require('path');
    const morgan = require('morgan');

    // Initialize Express app
    const app = express();
    const PORT = process.env.PORT || 3000;

    // Middleware
    app.use(express.json());
    app.use(express.urlencoded({ extended: true }));
    // Create public directory structure
    const publicDir = path.join(__dirname, 'public');
    if (!require('fs').existsSync(publicDir)) {
      require('fs').mkdirSync(publicDir, { recursive: true });
    }

    // Write static files
    require('fs').writeFileSync(path.join(publicDir, 'index.html'), require('fs').readFileSync(path.join(__dirname, 'public_index.html')));
    require('fs').writeFileSync(path.join(publicDir, 'styles.css'), require('fs').readFileSync(path.join(__dirname, 'public_styles.css')));
    require('fs').writeFileSync(path.join(publicDir, 'app.js'), require('fs').readFileSync(path.join(__dirname, 'public_app.js')));

    app.use(express.static(publicDir));
    app.use(morgan('dev'));

    // In-memory storage for tasks
    const tasks = [
      {
        _id: uuidv4(),
        title: "Task 1: Kubernetes Cluster Setup",
        description: "Set up a Kubernetes cluster using minikube or Docker Desktop for local development.",
        completed: true,
        createdAt: new Date(new Date().setDate(new Date().getDate() - 5))
      },
      {
        _id: uuidv4(),
        title: "Task 2: Containerize Application",
        description: "Create a Dockerfile and containerize the application.",
        completed: true,
        createdAt: new Date(new Date().setDate(new Date().getDate() - 4))
      },
      {
        _id: uuidv4(),
        title: "Task 3: Create Kubernetes Manifests",
        description: "Create Kubernetes deployment, service, and other necessary manifests.",
        completed: false,
        createdAt: new Date(new Date().setDate(new Date().getDate() - 3))
      },
      {
        _id: uuidv4(),
        title: "Task 4: Deploy to GKE",
        description: "Deploy the application to Google Kubernetes Engine.",
        completed: false,
        createdAt: new Date(new Date().setDate(new Date().getDate() - 2))
      },
      {
        _id: uuidv4(),
        title: "Task 5: Set Up Monitoring",
        description: "Set up monitoring for the application using Google Cloud Monitoring.",
        completed: false,
        createdAt: new Date(new Date().setDate(new Date().getDate() - 1))
      }
    ];

    // Routes
    app.get('/', (req, res) => {
      res.sendFile(path.join(__dirname, 'public', 'index.html'));
    });

    // Health check endpoint
    app.get('/health', (req, res) => {
      res.status(200).json({ status: 'ok' });
    });

    // API Routes
    app.get('/api/tasks', (req, res) => {
      res.json(tasks);
    });

    app.get('/api/tasks/:id', (req, res) => {
      const task = tasks.find(t => t._id === req.params.id);
      if (!task) {
        return res.status(404).json({ message: 'Task not found' });
      }
      res.json(task);
    });

    app.post('/api/tasks', (req, res) => {
      const { title, description } = req.body;

      if (!title) {
        return res.status(400).json({ message: 'Title is required' });
      }

      const newTask = {
        _id: uuidv4(),
        title,
        description: description || '',
        completed: false,
        createdAt: new Date()
      };

      tasks.push(newTask);
      res.status(201).json(newTask);
    });

    app.put('/api/tasks/:id', (req, res) => {
      const taskIndex = tasks.findIndex(t => t._id === req.params.id);

      if (taskIndex === -1) {
        return res.status(404).json({ message: 'Task not found' });
      }

      const { title, description, completed } = req.body;

      if (title !== undefined) tasks[taskIndex].title = title;
      if (description !== undefined) tasks[taskIndex].description = description;
      if (completed !== undefined) tasks[taskIndex].completed = completed;

      res.json(tasks[taskIndex]);
    });

    app.delete('/api/tasks/:id', (req, res) => {
      const taskIndex = tasks.findIndex(t => t._id === req.params.id);

      if (taskIndex === -1) {
        return res.status(404).json({ message: 'Task not found' });
      }

      const deletedTask = tasks.splice(taskIndex, 1)[0];
      res.json(deletedTask);
    });

    // Error handling middleware
    app.use((err, req, res, next) => {
      console.error(err.stack);
      res.status(500).json({
        message: 'Something went wrong!',
        error: process.env.NODE_ENV === 'production' ? {} : err,
        timestamp: new Date().toISOString()
      });
    });

    // Start server directly (no MongoDB connection needed)
    app.listen(PORT, '0.0.0.0', () => {
      console.log(`Server running on http://0.0.0.0:${PORT}`);
    });
  "package.json": |
    {
      "name": "task-management-app",
      "version": "1.0.0",
      "description": "A simple task management application",
      "main": "server.js",
      "scripts": {
        "start": "node server.js",
        "dev": "nodemon server.js"
      },
      "dependencies": {
        "express": "^4.18.2",
        "morgan": "^1.10.0",
        "uuid": "^9.0.0"
      }
    }
  "public_index.html": |
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Task Management App</title>
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
      <link rel="stylesheet" href="styles.css">
    </head>
    <body>
      <div class="container mt-4">
        <h1 class="text-center mb-4">Task Management App</h1>

        <div class="row mb-4">
          <div class="col">
            <div class="card">
              <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Add New Task</h5>
              </div>
              <div class="card-body">
                <form id="task-form">
                  <div class="mb-3">
                    <label for="title" class="form-label">Title</label>
                    <input type="text" class="form-control" id="title" required>
                  </div>
                  <div class="mb-3">
                    <label for="description" class="form-label">Description</label>
                    <textarea class="form-control" id="description" rows="3"></textarea>
                  </div>
                  <button type="submit" class="btn btn-primary">Add Task</button>
                </form>
              </div>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col">
            <div class="card">
              <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Task List</h5>
                <div>
                  <button id="refresh-btn" class="btn btn-sm btn-light">Refresh</button>
                </div>
              </div>
              <div class="card-body">
                <div id="tasks-container" class="list-group">
                  <!-- Tasks will be loaded here -->
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Task Detail Modal -->
      <div class="modal fade" id="taskModal" tabindex="-1" aria-labelledby="taskModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="taskModalLabel">Task Details</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <form id="edit-task-form">
                <input type="hidden" id="edit-id">
                <div class="mb-3">
                  <label for="edit-title" class="form-label">Title</label>
                  <input type="text" class="form-control" id="edit-title" required>
                </div>
                <div class="mb-3">
                  <label for="edit-description" class="form-label">Description</label>
                  <textarea class="form-control" id="edit-description" rows="3"></textarea>
                </div>
                <div class="mb-3 form-check">
                  <input type="checkbox" class="form-check-input" id="edit-completed">
                  <label class="form-check-label" for="edit-completed">Completed</label>
                </div>
              </form>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
              <button type="button" class="btn btn-danger" id="delete-task-btn">Delete</button>
              <button type="button" class="btn btn-primary" id="save-task-btn">Save changes</button>
            </div>
          </div>
        </div>
      </div>

      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
      <script src="app.js"></script>
    </body>
    </html>
  "public_styles.css": |
    .task-item {
      cursor: pointer;
      transition: background-color 0.2s;
    }

    .task-item:hover {
      background-color: #f8f9fa;
    }

    .task-completed {
      text-decoration: line-through;
      color: #6c757d;
    }

    .task-date {
      font-size: 0.8rem;
      color: #6c757d;
    }
  "public_app.js": |
    document.addEventListener('DOMContentLoaded', function() {
      // DOM elements
      const taskForm = document.getElementById('task-form');
      const tasksContainer = document.getElementById('tasks-container');
      const refreshBtn = document.getElementById('refresh-btn');
      const editTaskForm = document.getElementById('edit-task-form');
      const deleteTaskBtn = document.getElementById('delete-task-btn');
      const saveTaskBtn = document.getElementById('save-task-btn');

      // Bootstrap modal
      const taskModal = new bootstrap.Modal(document.getElementById('taskModal'));

      // Load tasks on page load
      loadTasks();

      // Event listeners
      taskForm.addEventListener('submit', addTask);
      refreshBtn.addEventListener('click', loadTasks);
      deleteTaskBtn.addEventListener('click', deleteTask);
      saveTaskBtn.addEventListener('click', updateTask);

      // Functions
      function loadTasks() {
        fetch('/api/tasks')
          .then(response => response.json())
          .then(tasks => {
            tasksContainer.innerHTML = '';

            if (tasks.length === 0) {
              tasksContainer.innerHTML = '<p class="text-center">No tasks found. Add a new task to get started!</p>';
              return;
            }

            tasks.forEach(task => {
              const taskElement = document.createElement('div');
              taskElement.className = `list-group-item list-group-item-action ${task.completed ? 'task-completed' : ''}`;
              taskElement.dataset.id = task._id;

              const date = new Date(task.createdAt).toLocaleDateString();

              taskElement.innerHTML = `
                <div class="d-flex w-100 justify-content-between align-items-center">
                  <h5 class="mb-1">${task.title}</h5>
                  <small class="task-date">${date}</small>
                </div>
                <p class="mb-1">${task.description || 'No description'}</p>
                <small>${task.completed ? 'Completed' : 'Pending'}</small>
              `;

              taskElement.addEventListener('click', () => openTaskModal(task));

              tasksContainer.appendChild(taskElement);
            });
          })
          .catch(error => console.error('Error loading tasks:', error));
      }

      function addTask(e) {
        e.preventDefault();

        const title = document.getElementById('title').value;
        const description = document.getElementById('description').value;

        fetch('/api/tasks', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ title, description })
        })
          .then(response => response.json())
          .then(newTask => {
            taskForm.reset();
            loadTasks();
          })
          .catch(error => console.error('Error adding task:', error));
      }

      function openTaskModal(task) {
        document.getElementById('edit-id').value = task._id;
        document.getElementById('edit-title').value = task.title;
        document.getElementById('edit-description').value = task.description || '';
        document.getElementById('edit-completed').checked = task.completed;

        document.getElementById('taskModalLabel').textContent = 'Edit Task';

        taskModal.show();
      }

      function updateTask() {
        const id = document.getElementById('edit-id').value;
        const title = document.getElementById('edit-title').value;
        const description = document.getElementById('edit-description').value;
        const completed = document.getElementById('edit-completed').checked;

        fetch(`/api/tasks/${id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ title, description, completed })
        })
          .then(response => response.json())
          .then(updatedTask => {
            taskModal.hide();
            loadTasks();
          })
          .catch(error => console.error('Error updating task:', error));
      }

      function deleteTask() {
        const id = document.getElementById('edit-id').value;

        fetch(`/api/tasks/${id}`, {
          method: 'DELETE'
        })
          .then(response => response.json())
          .then(deletedTask => {
            taskModal.hide();
            loadTasks();
          })
          .catch(error => console.error('Error deleting task:', error));
      }
    });
